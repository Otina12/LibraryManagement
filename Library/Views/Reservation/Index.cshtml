@using Library.Service.Dtos
@using Library.Service.Dtos.Reservations.Get
@using Library.ViewModels.Shared

@model EntityFiltersDto<(DateTime, IEnumerable<ReservationDto>)> // ordered by SupposedReturnDate in ascending order

@{
    ViewData["Title"] = "Reservations";
}

<head>
    <link rel="stylesheet" href="~/css/table.css"/>
</head>

<div class="my-container">
    <div class="my-header">
        <a asp-action="Create" class="btn btn-add">Create New Reservation</a>
    </div>

    <form method="get" class="search-form">
        <input type="text" name="searchString" value="@Model.SearchString" placeholder="Search..." />
        <input type="hidden" name="pageNumber" value="1" />
        <input type="hidden" name="pageSize" value="@Model.PageSize" />
        <button type="submit">Search</button>
    </form>
</div>

@foreach (var (date, reservations) in Model.Entities)
{
    if (date == DateTime.MinValue)
    {
        <h3 class="reservation-date overdue">Overdue Reservations</h3>
    }
    else
    {
        <h3 class="reservation-date">@date.ToShortDateString()</h3>
    }

    var sortableTableModel = new SortableTableModel
                {
                    Items = reservations,
                    Columns = new List<SortableColumn>
        {
            new("BookTitle", "Book", false),
            new("Quantity", "Quantity", false),
            new("CustomerId", "Customer ID", false),
            new("ReservationDate", "Reservation Date", false)
        },
                    ActionName = "Index",
                    ControllerName = "Reservation",
                    GetPropertyValue = (reservation, prop) =>
                    {
                        var reservationDto = reservation as ReservationDto;
                        return prop switch
                        {
                            "Id" => reservationDto!.Id,
                            "BookTitle" => reservationDto!.BookTitle,
                            "Quantity" => reservationDto!.Quantity,
                            "CustomerId" => reservationDto!.CustomerId,
                            "ReservationDate" => reservationDto!.ReservationDate.ToShortDateString(),
                            _ => ""
                        };
                    }
                };

    @await Html.PartialAsync("_TablePartial", sortableTableModel)
}

<div class="pagination">
    @{
        int totalPages = (int)Math.Ceiling((double)Model.TotalItems / Model.PageSize);
    }

    @if (Model.PageNumber > 1)
    {
        <a href="@Url.Action("Index", new { searchString = Model.SearchString, pageNumber = Model.PageNumber - 1, pageSize = Model.PageSize })" class="page-link">&laquo;</a>
    }

    @for (int i = 1; i <= totalPages; i++)
    {
        <a href="@Url.Action("Index", new { searchString = Model.SearchString, pageNumber = i, pageSize = Model.PageSize })"
           class="page-link @(i == Model.PageNumber ? "active" : "")">
            @i
        </a>
    }

    @if (Model.PageNumber < totalPages)
    {
        <a href="@Url.Action("Index", new { searchString = Model.SearchString, pageNumber = Model.PageNumber + 1, pageSize = Model.PageSize })" class="page-link">&raquo;</a>
    }
    <span class="page-info">Page @Model.PageNumber of @totalPages</span>
</div>