@using Library.Service.Dtos
@using Library.Service.Dtos.Reservations
@using Library.Service.Dtos.Reservations.Get
@using Library.ViewModels.Shared

@model ReservationFiltersDto // ordered by SupposedReturnDate in ascending order

@{
    ViewData["Title"] = "Reservations";
}

<head>
    <link rel="stylesheet" href="~/css/table.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
</head>

<div class="my-header">
    <a asp-action="Create" class="btn btn-add">Create New Reservation</a>
</div>

<form method="get" class="search-form">
    <input type="text" name="searchString" value="@Model.SearchString" placeholder="Search..." />
    <button type="submit" class="btn btn-search">Search</button>
</form>

<a asp-action="Index" asp-route-History="true" class="btn btn-history">
    <i class="fas fa-history"></i> View History
</a>

<a href="#" id="toggleFilters" class="toggle-filters">Show Filters</a>

<form method="get" style="display: none;" class="filters-form">
    <div class="filter-group">
        <h4>Reservation Date</h4>
        <div class="date-range">
            <div class="date-input">
                <label for="minReservationDate">From:</label>
                <input type="date" id="minReservationDate" name="minReservationDate" value="@Model.MinReservationDate.ToString("yyyy-MM-dd")" />
            </div>
            <div class="date-input">
                <label for="maxReservationDate">To:</label>
                <input type="date" id="maxReservationDate" name="maxReservationDate" value="@Model.MaxReservationDate.ToString("yyyy-MM-dd")" />
            </div>
        </div>
    </div>

    <div class="filter-group">
        <h4>Return Date</h4>
        <div class="date-range">
            <div class="date-input">
                <label for="minReturnDate">From:</label>
                <input type="date" id="minReturnDate" name="minReturnDate" value="@Model.MinReturnDate.ToString("yyyy-MM-dd")" />
            </div>
            <div class="date-input">
                <label for="maxReturnDate">To:</label>
                <input type="date" id="maxReturnDate" name="maxReturnDate" value="@Model.MaxReturnDate.ToString("yyyy-MM-dd")" />
            </div>
        </div>
    </div>

    <input type="hidden" name="pageNumber" value="1" />
    <input type="hidden" name="pageSize" value="@Model.PageSize" />

    <div class="filter-actions">
        <button type="submit" class="btn btn-filter">Apply Filters</button>
        <button type="reset" class="btn btn-reset">Reset</button>
    </div>
</form>

@foreach (var (date, reservations) in Model.Entities)
{
    if (date == DateTime.MinValue)
    {
        <h3 class="reservation-date overdue">Overdue Reservations</h3>
    }
    else
    {
        <h3 class="reservation-date">@date.ToShortDateString()</h3>
    }

    var sortableTableModel = new SortableTableModel
                {
                    Items = reservations,
                    Columns = new List<SortableColumn>
        {
            new("BookTitle", "Book", false),
            new("Quantity", "Quantity", false),
            new("CustomerId", "Customer ID", false),
            new("ReservationDate", "Reservation Date", false)
        },
                    ActionName = "Index",
                    ControllerName = "Reservation",
                    GetPropertyValue = (reservation, prop) =>
                    {
                        var reservationDto = reservation as ReservationDto;
                        return prop switch
                        {
                            "Id" => reservationDto!.Id,
                            "BookTitle" => reservationDto!.BookTitle,
                            "Quantity" => reservationDto!.QuantityToReturn,
                            "CustomerId" => reservationDto!.CustomerId,
                            "ReservationDate" => reservationDto!.ReservationDate.ToShortDateString(),
                            _ => ""
                        };
                    }
                };

    @await Html.PartialAsync("_TablePartial", sortableTableModel)
}

<div class="pagination">
    @{
        int totalPages = (int)Math.Ceiling((double)Model.TotalItems / Model.PageSize);
    }

    @if (Model.PageNumber > 1)
    {
        <a href="@Url.Action("Index", new { searchString = Model.SearchString, pageNumber = Model.PageNumber - 1, pageSize = Model.PageSize })" class="page-link">&laquo;</a>
    }

    @for (int i = 1; i <= totalPages; i++)
    {
        <a href="@Url.Action("Index", new { searchString = Model.SearchString, pageNumber = i, pageSize = Model.PageSize })"
           class="page-link @(i == Model.PageNumber ? "active" : "")">
            @i
        </a>
    }

    @if (Model.PageNumber < totalPages)
    {
        <a href="@Url.Action("Index", new { searchString = Model.SearchString, pageNumber = Model.PageNumber + 1, pageSize = Model.PageSize })" class="page-link">&raquo;</a>
    }
    <span class="page-info">Page @Model.PageNumber of @totalPages</span>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const toggleFilters = document.getElementById('toggleFilters');
        const filtersForm = document.querySelector('.filters-form');

        toggleFilters.addEventListener('click', function (e) {
            e.preventDefault();
            if (filtersForm.style.display === 'none') {
                filtersForm.style.display = 'flex';
                toggleFilters.textContent = 'Hide Filters';
            } else {
                filtersForm.style.display = 'none';
                toggleFilters.textContent = 'Show Filters';
            }
        });
    });
</script>